---
const navItems = [
  { name: 'Home', href: '/' },
  { name: 'Science', href: '/science' },
  { name: 'Space', href: '/space' },
  { name: 'National Security', href: '/national-security' },
  { name: 'Cyber Security', href: '/cyber-security' },
  { name: 'Hybrid Warfare', href: '/hybrid-warfare' },
  { name: 'Art', href: '/art' },
];

const currentPath = Astro.url.pathname;
---

<header class="sticky top-0 z-50 bg-white/90 dark:bg-primary-500/90 backdrop-blur-md shadow-sm">
  <div class="container mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between items-center py-4">
      <a href="/" class="text-2xl font-heading font-bold text-primary-500 dark:text-white flex items-center space-x-2">
        <span class="flex items-center justify-center bg-primary-500 dark:bg-white w-8 h-8 rounded-full">
          <span class="text-white dark:text-primary-500 font-bold">P</span>
        </span>
        <span>Perspective</span>
      </a>
      
      <!-- Desktop Navigation -->
      <nav class="hidden md:flex space-x-6">
        {navItems.map(item => (
          <a 
            href={item.href} 
            class={`font-medium transition-colors duration-200 hover:text-secondary-500 ${
              currentPath === item.href || 
              (item.href !== '/' && currentPath.startsWith(item.href)) 
                ? 'text-secondary-500 dark:text-secondary-400' 
                : 'text-gray-700 dark:text-gray-200'
            }`}
          >
            {item.name}
          </a>
        ))}
      </nav>
      
      <div class="flex items-center space-x-4">
        <!-- Search Button -->
        <button 
          aria-label="Search"
          class="p-2 text-gray-700 dark:text-gray-200 hover:text-secondary-500 dark:hover:text-secondary-400 transition-colors duration-200"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
        </button>
        
        <!-- Dark Mode Toggle -->
        <button 
          id="theme-toggle" 
          aria-label="Toggle Dark Mode"
          class="p-2 text-gray-700 dark:text-gray-200 hover:text-secondary-500 dark:hover:text-secondary-400 transition-colors duration-200"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 dark:hidden" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
          </svg>
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 hidden dark:block" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
          </svg>
        </button>
        
        <!-- Mobile Menu Button -->
        <button 
          id="mobile-menu-button"
          aria-label="Toggle Mobile Menu"
          class="p-2 md:hidden text-gray-700 dark:text-gray-200 hover:text-secondary-500 dark:hover:text-secondary-400 transition-colors duration-200"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
        </button>
      </div>
    </div>
    
    <!-- Mobile Navigation -->
    <div id="mobile-menu" class="md:hidden hidden pb-4">
      <nav class="flex flex-col space-y-4">
        {navItems.map(item => (
          <a 
            href={item.href} 
            class={`font-medium transition-colors duration-200 hover:text-secondary-500 ${
              currentPath === item.href || 
              (item.href !== '/' && currentPath.startsWith(item.href)) 
                ? 'text-secondary-500 dark:text-secondary-400' 
                : 'text-gray-700 dark:text-gray-200'
            }`}
          >
            {item.name}
          </a>
        ))}
      </nav>
    </div>
  </div>
</header>

<script>
  // Mobile Menu Toggle
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');
  
  if (mobileMenuButton && mobileMenu) {
    mobileMenuButton.addEventListener('click', () => {
      mobileMenu.classList.toggle('hidden');
    });
  }
  
  // Dark Mode Toggle
  const themeToggle = document.getElementById('theme-toggle');
  
  if (themeToggle) {
    themeToggle.addEventListener('click', () => {
      document.documentElement.classList.toggle('dark');
      
      // Update local storage
      const theme = document.documentElement.classList.contains('dark') ? 'dark' : 'light';
      localStorage.setItem('theme', theme);
    });
  }
</script>